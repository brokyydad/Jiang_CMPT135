#include<iostream>
using namespace std;

class Triangle
{
public:
    Triangle();
    Triangle(double, double, double); // to initialize the sides
    
    void displayType()
    {
        if(s1==s2==s3)
            cout<<"equilateral"<<endl;
        else if(s1==s2||s2==s3||s1==s3)
            cout<<"isosceles"<<endl;
        else
            cout<<"scalene"<<endl;
    }
double getPerimeter() const; // returns the perimeter of this triangle
private:
    double s1; // side1
    double s2; // side2
    double s3; // side3
};

Triangle maxPerimeter(Triangle t[],int size)
{
    int longest=0;
    int index;
    for(int i=0;i<size;i++)
    {
        int temp=t[i].getPerimeter() const;
        if(temp>longest)
        {
            longest=temp;
            index=i;
        }
    }
    return t[index];
}


#include<iostream>
#include<ctime>
using namespace std;

class PrimeNumber
{
public :
	PrimeNumber();
	PrimeNumber(int N);
	PrimeNumber next();
	int getPrime();
	friend ostream& operator << (ostream& returns, const PrimeNumber&);

private:
	int num;
};

bool isPrime(int number) {
	if (number <= 1) {
		return false;
	}

	for (int i = 2; i * i <= number; i++) {
		if (number % i == 0) {
			return false;
		}
	}

	return true;
}

PrimeNumber operator ++ (PrimeNumber& P)
{
	int temp = P.getPrime();
	int next = temp + 1;
	while (!isPrime(next))
	{
		next++;
	}
	PrimeNumber Result(next);
	return Result;
}

PrimeNumber PrimeNumber::next()
{
	int temp = getPrime();
	int next = temp + 1;
	while (!isPrime(next))
	{
		next++;
	}
	PrimeNumber result(next);
	return result;
}


int PrimeNumber::getPrime()
{
	return num;
}

PrimeNumber::PrimeNumber()
{
	num = 2;
}

PrimeNumber::PrimeNumber(int n)
{
	num = n;
}

ostream& operator << (ostream& returns, const PrimeNumber& n)
{
	returns << n.num << endl;
	return returns;
}

int main()
{
	srand(time(0));
	int N = rand() % 96 + 5;
	PrimeNumber* arr= new PrimeNumber[N];
	cout << N << endl;
	
	for (int i = 0; i < N; i++)
	{
		cout << arr[i] << " ";
		arr[i + 1] = arr[i].next();
	}
	delete[] arr;
	return 0;
}
