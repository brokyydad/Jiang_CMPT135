class String {
private:
    char* str;
    int len;

public:
    //big3
    String();
    String(char* cstr);
    String(const String& newString);
    ~String();
    //overload
    char& operator[] (int index) const;


    //length
    int length() const;
    
};

String::String()
{
    str = new char[0];
    len = 0;
}

String::String(char* cstr)
{
    len = strlen(cstr);
    str = new char[len];
    for (int i = 0; i < len; i++)
    {
        str[i] = cstr[i];
    }
}

String::String(const String& newString)
{
    len = strlen(newString.str);
    str = new char[len];
    for (int i = 0; i < len; i++)
    {
        str[i] = newString.str[i];
    }
}

String:: ~String()
{
    delete[] str;
}

char& String:: operator[](int index) const
{
    return str[index];
}

int String::length() const
{
    return len;
}

int compare_cstrs(char* str1, char* str2)
{
    int i = 0;
    while (str1[i] != '\0' && str2[i] != '\0')
    {
        if (str1[i] > str2[i])
            return 1;
        else if (str1[i] < str2[i])
            return -1;

        i++;
    }
    return 0;
}

int compare_strings(const String& s1, const String& s2)
{
    int len;
    if (s1.length() <= s2.length())
        len = s1.length();
    else
        len = s2.length();
    

    for (int i = 0; i <= len; i++)
    {
        if (s1[i] < s2[i])
        {
            return -1;
        }

        if (s1[i] > s2[i])
        {
            return 1;
        }
    }

    return 0;
}
